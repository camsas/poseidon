/*
Copyright 2018 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by protoc-gen-go. DO NOT EDIT.
// source: resource_desc.proto

package firmament

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ResourceDescriptor_ResourceState int32

const (
	ResourceDescriptor_RESOURCE_UNKNOWN ResourceDescriptor_ResourceState = 0
	ResourceDescriptor_RESOURCE_IDLE    ResourceDescriptor_ResourceState = 1
	ResourceDescriptor_RESOURCE_BUSY    ResourceDescriptor_ResourceState = 2
	ResourceDescriptor_RESOURCE_LOST    ResourceDescriptor_ResourceState = 3
)

var ResourceDescriptor_ResourceState_name = map[int32]string{
	0: "RESOURCE_UNKNOWN",
	1: "RESOURCE_IDLE",
	2: "RESOURCE_BUSY",
	3: "RESOURCE_LOST",
}
var ResourceDescriptor_ResourceState_value = map[string]int32{
	"RESOURCE_UNKNOWN": 0,
	"RESOURCE_IDLE":    1,
	"RESOURCE_BUSY":    2,
	"RESOURCE_LOST":    3,
}

func (x ResourceDescriptor_ResourceState) String() string {
	return proto.EnumName(ResourceDescriptor_ResourceState_name, int32(x))
}
func (ResourceDescriptor_ResourceState) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor10, []int{0, 0}
}

type ResourceDescriptor_ResourceType int32

const (
	ResourceDescriptor_RESOURCE_PU          ResourceDescriptor_ResourceType = 0
	ResourceDescriptor_RESOURCE_CORE        ResourceDescriptor_ResourceType = 1
	ResourceDescriptor_RESOURCE_CACHE       ResourceDescriptor_ResourceType = 2
	ResourceDescriptor_RESOURCE_NIC         ResourceDescriptor_ResourceType = 3
	ResourceDescriptor_RESOURCE_DISK        ResourceDescriptor_ResourceType = 4
	ResourceDescriptor_RESOURCE_SSD         ResourceDescriptor_ResourceType = 5
	ResourceDescriptor_RESOURCE_MACHINE     ResourceDescriptor_ResourceType = 6
	ResourceDescriptor_RESOURCE_LOGICAL     ResourceDescriptor_ResourceType = 7
	ResourceDescriptor_RESOURCE_NUMA_NODE   ResourceDescriptor_ResourceType = 8
	ResourceDescriptor_RESOURCE_SOCKET      ResourceDescriptor_ResourceType = 9
	ResourceDescriptor_RESOURCE_COORDINATOR ResourceDescriptor_ResourceType = 10
)

var ResourceDescriptor_ResourceType_name = map[int32]string{
	0:  "RESOURCE_PU",
	1:  "RESOURCE_CORE",
	2:  "RESOURCE_CACHE",
	3:  "RESOURCE_NIC",
	4:  "RESOURCE_DISK",
	5:  "RESOURCE_SSD",
	6:  "RESOURCE_MACHINE",
	7:  "RESOURCE_LOGICAL",
	8:  "RESOURCE_NUMA_NODE",
	9:  "RESOURCE_SOCKET",
	10: "RESOURCE_COORDINATOR",
}
var ResourceDescriptor_ResourceType_value = map[string]int32{
	"RESOURCE_PU":          0,
	"RESOURCE_CORE":        1,
	"RESOURCE_CACHE":       2,
	"RESOURCE_NIC":         3,
	"RESOURCE_DISK":        4,
	"RESOURCE_SSD":         5,
	"RESOURCE_MACHINE":     6,
	"RESOURCE_LOGICAL":     7,
	"RESOURCE_NUMA_NODE":   8,
	"RESOURCE_SOCKET":      9,
	"RESOURCE_COORDINATOR": 10,
}

func (x ResourceDescriptor_ResourceType) String() string {
	return proto.EnumName(ResourceDescriptor_ResourceType_name, int32(x))
}
func (ResourceDescriptor_ResourceType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor10, []int{0, 1}
}

type ResourceDescriptor struct {
	Uuid            string `protobuf:"bytes,1,opt,name=uuid" json:"uuid,omitempty"`
	FriendlyName    string `protobuf:"bytes,2,opt,name=friendly_name,json=friendlyName" json:"friendly_name,omitempty"`
	DescriptiveName string `protobuf:"bytes,3,opt,name=descriptive_name,json=descriptiveName" json:"descriptive_name,omitempty"`
	// state is the state of resource.
	State ResourceDescriptor_ResourceState `protobuf:"varint,4,opt,name=state,enum=firmament.ResourceDescriptor_ResourceState" json:"state,omitempty"`
	// task_capacity is the max number of tasks that can be scheduled on the resource.
	TaskCapacity uint64 `protobuf:"varint,5,opt,name=task_capacity,json=taskCapacity" json:"task_capacity,omitempty"`
	// last heartbeat of the resource, e.g. node.
	LastHeartbeat uint64 `protobuf:"varint,6,opt,name=last_heartbeat,json=lastHeartbeat" json:"last_heartbeat,omitempty"`
	// Type of the resource
	Type ResourceDescriptor_ResourceType `protobuf:"varint,7,opt,name=type,enum=firmament.ResourceDescriptor_ResourceType" json:"type,omitempty"`
	// schedulable indicates if the resource, e.g. node is able to schedule tasks.
	Schedulable bool `protobuf:"varint,8,opt,name=schedulable" json:"schedulable,omitempty"`
	// current_running_tasks stores all the running tasks on the resource, e.g. node.
	CurrentRunningTasks []uint64 `protobuf:"varint,9,rep,packed,name=current_running_tasks,json=currentRunningTasks" json:"current_running_tasks,omitempty"`
	// num_running_tasks_below stores the number of running tasks on the resources that are below this node.
	NumRunningTasksBelow uint64 `protobuf:"varint,10,opt,name=num_running_tasks_below,json=numRunningTasksBelow" json:"num_running_tasks_below,omitempty"`
	NumSlotsBelow        uint64 `protobuf:"varint,11,opt,name=num_slots_below,json=numSlotsBelow" json:"num_slots_below,omitempty"`
	// Resource capacity and load tracking
	AvailableResources          *ResourceVector `protobuf:"bytes,12,opt,name=available_resources,json=availableResources" json:"available_resources,omitempty"`
	ReservedResources           *ResourceVector `protobuf:"bytes,13,opt,name=reserved_resources,json=reservedResources" json:"reserved_resources,omitempty"`
	MinAvailableResourcesBelow  *ResourceVector `protobuf:"bytes,14,opt,name=min_available_resources_below,json=minAvailableResourcesBelow" json:"min_available_resources_below,omitempty"`
	MaxAvailableResourcesBelow  *ResourceVector `protobuf:"bytes,15,opt,name=max_available_resources_below,json=maxAvailableResourcesBelow" json:"max_available_resources_below,omitempty"`
	MinUnreservedResourcesBelow *ResourceVector `protobuf:"bytes,16,opt,name=min_unreserved_resources_below,json=minUnreservedResourcesBelow" json:"min_unreserved_resources_below,omitempty"`
	MaxUnreservedResourcesBelow *ResourceVector `protobuf:"bytes,17,opt,name=max_unreserved_resources_below,json=maxUnreservedResourcesBelow" json:"max_unreserved_resources_below,omitempty"`
	ResourceCapacity            *ResourceVector `protobuf:"bytes,18,opt,name=resource_capacity,json=resourceCapacity" json:"resource_capacity,omitempty"`
	// Cost-model-specific statistics
	WhareMapStats          *WhareMapStats          `protobuf:"bytes,19,opt,name=whare_map_stats,json=whareMapStats" json:"whare_map_stats,omitempty"`
	CocoInterferenceScores *CoCoInterferenceScores `protobuf:"bytes,20,opt,name=coco_interference_scores,json=cocoInterferenceScores" json:"coco_interference_scores,omitempty"`
	// Simulation related fields
	TraceMachineId uint64 `protobuf:"varint,21,opt,name=trace_machine_id,json=traceMachineId" json:"trace_machine_id,omitempty"`
	// Resource labels
	Labels []*Label `protobuf:"bytes,32,rep,name=labels" json:"labels,omitempty"`
	// Max pods allowed per node
	MaxPods uint64 `protobuf:"varint,33,opt,name=max_pods,json=maxPods" json:"max_pods,omitempty"`
}

func (m *ResourceDescriptor) Reset()                    { *m = ResourceDescriptor{} }
func (m *ResourceDescriptor) String() string            { return proto.CompactTextString(m) }
func (*ResourceDescriptor) ProtoMessage()               {}
func (*ResourceDescriptor) Descriptor() ([]byte, []int) { return fileDescriptor10, []int{0} }

func (m *ResourceDescriptor) GetUuid() string {
	if m != nil {
		return m.Uuid
	}
	return ""
}

func (m *ResourceDescriptor) GetFriendlyName() string {
	if m != nil {
		return m.FriendlyName
	}
	return ""
}

func (m *ResourceDescriptor) GetDescriptiveName() string {
	if m != nil {
		return m.DescriptiveName
	}
	return ""
}

func (m *ResourceDescriptor) GetState() ResourceDescriptor_ResourceState {
	if m != nil {
		return m.State
	}
	return ResourceDescriptor_RESOURCE_UNKNOWN
}

func (m *ResourceDescriptor) GetTaskCapacity() uint64 {
	if m != nil {
		return m.TaskCapacity
	}
	return 0
}

func (m *ResourceDescriptor) GetLastHeartbeat() uint64 {
	if m != nil {
		return m.LastHeartbeat
	}
	return 0
}

func (m *ResourceDescriptor) GetType() ResourceDescriptor_ResourceType {
	if m != nil {
		return m.Type
	}
	return ResourceDescriptor_RESOURCE_PU
}

func (m *ResourceDescriptor) GetSchedulable() bool {
	if m != nil {
		return m.Schedulable
	}
	return false
}

func (m *ResourceDescriptor) GetCurrentRunningTasks() []uint64 {
	if m != nil {
		return m.CurrentRunningTasks
	}
	return nil
}

func (m *ResourceDescriptor) GetNumRunningTasksBelow() uint64 {
	if m != nil {
		return m.NumRunningTasksBelow
	}
	return 0
}

func (m *ResourceDescriptor) GetNumSlotsBelow() uint64 {
	if m != nil {
		return m.NumSlotsBelow
	}
	return 0
}

func (m *ResourceDescriptor) GetAvailableResources() *ResourceVector {
	if m != nil {
		return m.AvailableResources
	}
	return nil
}

func (m *ResourceDescriptor) GetReservedResources() *ResourceVector {
	if m != nil {
		return m.ReservedResources
	}
	return nil
}

func (m *ResourceDescriptor) GetMinAvailableResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MinAvailableResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMaxAvailableResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MaxAvailableResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMinUnreservedResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MinUnreservedResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetMaxUnreservedResourcesBelow() *ResourceVector {
	if m != nil {
		return m.MaxUnreservedResourcesBelow
	}
	return nil
}

func (m *ResourceDescriptor) GetResourceCapacity() *ResourceVector {
	if m != nil {
		return m.ResourceCapacity
	}
	return nil
}

func (m *ResourceDescriptor) GetWhareMapStats() *WhareMapStats {
	if m != nil {
		return m.WhareMapStats
	}
	return nil
}

func (m *ResourceDescriptor) GetCocoInterferenceScores() *CoCoInterferenceScores {
	if m != nil {
		return m.CocoInterferenceScores
	}
	return nil
}

func (m *ResourceDescriptor) GetTraceMachineId() uint64 {
	if m != nil {
		return m.TraceMachineId
	}
	return 0
}

func (m *ResourceDescriptor) GetLabels() []*Label {
	if m != nil {
		return m.Labels
	}
	return nil
}

func (m *ResourceDescriptor) GetMaxPods() uint64 {
	if m != nil {
		return m.MaxPods
	}
	return 0
}

func init() {
	proto.RegisterType((*ResourceDescriptor)(nil), "firmament.ResourceDescriptor")
	proto.RegisterEnum("firmament.ResourceDescriptor_ResourceState", ResourceDescriptor_ResourceState_name, ResourceDescriptor_ResourceState_value)
	proto.RegisterEnum("firmament.ResourceDescriptor_ResourceType", ResourceDescriptor_ResourceType_name, ResourceDescriptor_ResourceType_value)
}

func init() { proto.RegisterFile("resource_desc.proto", fileDescriptor10) }

var fileDescriptor10 = []byte{
	// 807 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x95, 0xed, 0x6e, 0xe3, 0xc4,
	0x17, 0xc6, 0xff, 0x69, 0xd2, 0xb7, 0x93, 0xb7, 0xe9, 0xa4, 0xdd, 0xff, 0x6c, 0x11, 0x2b, 0x6f,
	0x11, 0xc8, 0x80, 0xd4, 0x0f, 0x45, 0x7c, 0x45, 0x64, 0x9d, 0x40, 0x43, 0xd3, 0x78, 0x35, 0x4e,
	0x58, 0x21, 0xd0, 0x5a, 0x13, 0x7b, 0x4a, 0x2d, 0xe2, 0x71, 0x34, 0x63, 0xb7, 0xe9, 0x95, 0x71,
	0x5b, 0x5c, 0x02, 0x9a, 0x89, 0xe3, 0x38, 0x9b, 0xed, 0x86, 0x6f, 0xf5, 0x73, 0x9e, 0xf3, 0xf3,
	0x73, 0xa6, 0x9e, 0x13, 0xe8, 0x48, 0xae, 0x92, 0x4c, 0x06, 0xdc, 0x0f, 0xb9, 0x0a, 0x2e, 0xe7,
	0x32, 0x49, 0x13, 0x7c, 0x7c, 0x17, 0xc9, 0x98, 0xc5, 0x5c, 0xa4, 0xe7, 0xaf, 0x82, 0x24, 0x48,
	0xfc, 0x48, 0xa4, 0x5c, 0xde, 0x71, 0xc9, 0x45, 0xc0, 0x7d, 0x15, 0x24, 0x92, 0xab, 0xa5, 0xf5,
	0xbc, 0x3e, 0x63, 0x53, 0x3e, 0xcb, 0x1f, 0xce, 0x0a, 0xd8, 0x03, 0x0f, 0xd2, 0x44, 0xae, 0xe4,
	0xc7, 0x7b, 0x26, 0xb9, 0x1f, 0xb3, 0xb9, 0xaf, 0x52, 0x96, 0xe6, 0xad, 0x17, 0x7f, 0x37, 0x01,
	0xd3, 0xbc, 0xa1, 0xc7, 0x55, 0x20, 0xa3, 0x79, 0x9a, 0x48, 0x8c, 0xa1, 0x96, 0x65, 0x51, 0x48,
	0x2a, 0x56, 0xc5, 0x3e, 0xa6, 0xe6, 0x6f, 0xfc, 0x05, 0x34, 0xef, 0x64, 0xc4, 0x45, 0x38, 0x7b,
	0xf2, 0x05, 0x8b, 0x39, 0xd9, 0x33, 0xc5, 0xc6, 0x4a, 0x1c, 0xb1, 0x98, 0xe3, 0xaf, 0x01, 0x85,
	0x39, 0x26, 0x7a, 0xe0, 0x4b, 0x5f, 0xd5, 0xf8, 0xda, 0x25, 0xdd, 0x58, 0xbb, 0xb0, 0xaf, 0x93,
	0x70, 0x52, 0xb3, 0x2a, 0x76, 0xeb, 0xea, 0xdb, 0xcb, 0x62, 0xe0, 0xcb, 0xed, 0x44, 0x85, 0xe4,
	0xe9, 0x16, 0xba, 0xec, 0xd4, 0x91, 0x52, 0xa6, 0xfe, 0xf2, 0x03, 0x36, 0x67, 0x41, 0x94, 0x3e,
	0x91, 0x7d, 0xab, 0x62, 0xd7, 0x68, 0x43, 0x8b, 0x4e, 0xae, 0xe1, 0x2f, 0xa1, 0x35, 0x63, 0x2a,
	0xf5, 0xef, 0x39, 0x93, 0xe9, 0x94, 0xb3, 0x94, 0x1c, 0x18, 0x57, 0x53, 0xab, 0xd7, 0x2b, 0x11,
	0xff, 0x00, 0xb5, 0xf4, 0x69, 0xce, 0xc9, 0xa1, 0x49, 0xf3, 0xcd, 0x7f, 0x4b, 0x33, 0x7e, 0x9a,
	0x73, 0x6a, 0xfa, 0xb0, 0x05, 0x75, 0x15, 0xdc, 0xf3, 0x30, 0x9b, 0xb1, 0xe9, 0x8c, 0x93, 0x23,
	0xab, 0x62, 0x1f, 0xd1, 0xb2, 0x84, 0xaf, 0xe0, 0x2c, 0xc8, 0xa4, 0xe4, 0x22, 0xf5, 0x65, 0x26,
	0x44, 0x24, 0xfe, 0xf4, 0x75, 0x50, 0x45, 0x8e, 0xad, 0xaa, 0x5d, 0xa3, 0x9d, 0xbc, 0x48, 0x97,
	0xb5, 0xb1, 0x2e, 0xe1, 0xef, 0xe1, 0xff, 0x22, 0x8b, 0x37, 0xfd, 0xfe, 0x94, 0xcf, 0x92, 0x47,
	0x02, 0x66, 0x8a, 0x53, 0x91, 0xc5, 0xe5, 0x8e, 0x37, 0xba, 0x86, 0xbf, 0x82, 0xb6, 0x6e, 0x53,
	0xb3, 0x24, 0x5d, 0xd9, 0xeb, 0xcb, 0xa1, 0x45, 0x16, 0x7b, 0x5a, 0x5d, 0xfa, 0x7e, 0x81, 0x0e,
	0x7b, 0x60, 0x91, 0xc9, 0xe7, 0xaf, 0x3e, 0x1c, 0x45, 0x1a, 0x56, 0xc5, 0xae, 0x5f, 0xbd, 0xfc,
	0xc8, 0x19, 0xfc, 0x6a, 0xbe, 0x29, 0x8a, 0x8b, 0xae, 0x55, 0x41, 0xe1, 0x6b, 0xc0, 0x92, 0x2b,
	0x2e, 0x1f, 0x78, 0x58, 0x42, 0x35, 0x77, 0xa1, 0x4e, 0x56, 0x4d, 0x6b, 0xd2, 0x1f, 0xf0, 0x79,
	0x1c, 0x09, 0xff, 0x23, 0xc9, 0xf2, 0x59, 0x5a, 0xbb, 0xa0, 0xe7, 0x71, 0x24, 0xba, 0x5b, 0x11,
	0x97, 0x33, 0x6b, 0x3a, 0x5b, 0x7c, 0x82, 0xde, 0xde, 0x4d, 0x67, 0x8b, 0xe7, 0xe8, 0xef, 0xe1,
	0x95, 0xce, 0x9e, 0x89, 0xed, 0xb3, 0xc8, 0xf1, 0x68, 0x17, 0xfe, 0xb3, 0x38, 0x12, 0x13, 0xb1,
	0x75, 0x2c, 0x6b, 0x3e, 0x5b, 0x7c, 0x8a, 0x7f, 0xb2, 0x9b, 0xcf, 0x16, 0xcf, 0xf2, 0x7f, 0x82,
	0x93, 0x62, 0x81, 0x14, 0xd7, 0x0a, 0xef, 0x42, 0xa2, 0x55, 0x4f, 0x71, 0xeb, 0x7e, 0x84, 0xf6,
	0x07, 0x1b, 0x87, 0x74, 0x0c, 0x85, 0x94, 0x28, 0xef, 0xb4, 0xe3, 0x96, 0xcd, 0xf5, 0xa5, 0x56,
	0xb4, 0xf9, 0x58, 0x7e, 0xc4, 0xbf, 0x03, 0x79, 0x6e, 0xef, 0x91, 0x53, 0x83, 0x7a, 0x5d, 0x42,
	0x39, 0x89, 0x93, 0x0c, 0x4a, 0x4e, 0xcf, 0x18, 0xe9, 0x0b, 0x8d, 0xd8, 0xd6, 0xb1, 0x0d, 0x28,
	0x95, 0x2c, 0xd0, 0xf1, 0x82, 0xfb, 0x48, 0x70, 0x3f, 0x0a, 0xc9, 0x99, 0xb9, 0x21, 0x2d, 0xa3,
	0xdf, 0x2e, 0xe5, 0x41, 0x88, 0x6d, 0x38, 0x30, 0xeb, 0x55, 0x11, 0xcb, 0xaa, 0xda, 0xf5, 0x2b,
	0x54, 0x7a, 0xe9, 0x50, 0x17, 0x68, 0x5e, 0xc7, 0x2f, 0xe1, 0x48, 0xff, 0x6b, 0xe6, 0x49, 0xa8,
	0xc8, 0x6b, 0xc3, 0x3a, 0x8c, 0xd9, 0xe2, 0x6d, 0x12, 0xaa, 0x8b, 0xf7, 0xd0, 0xdc, 0x58, 0x60,
	0xf8, 0x14, 0x10, 0xed, 0x7b, 0xee, 0x84, 0x3a, 0x7d, 0x7f, 0x32, 0xba, 0x19, 0xb9, 0xef, 0x46,
	0xe8, 0x7f, 0xf8, 0x04, 0x9a, 0x85, 0x3a, 0xe8, 0x0d, 0xfb, 0xa8, 0xb2, 0x21, 0xbd, 0x99, 0x78,
	0xbf, 0xa1, 0xbd, 0x0d, 0x69, 0xe8, 0x7a, 0x63, 0x54, 0xbd, 0xf8, 0xa7, 0x02, 0x8d, 0xf2, 0x4e,
	0xc2, 0x6d, 0xa8, 0x17, 0x9e, 0xb7, 0x93, 0x0f, 0xd0, 0x8e, 0x4b, 0x35, 0x1a, 0x43, 0x6b, 0x2d,
	0x75, 0x9d, 0xeb, 0x3e, 0xda, 0xc3, 0x08, 0x1a, 0x85, 0x36, 0x1a, 0x38, 0xa8, 0xba, 0xd1, 0xd8,
	0x1b, 0x78, 0x37, 0xa8, 0xb6, 0x61, 0xf2, 0xbc, 0x1e, 0xda, 0xdf, 0x18, 0xe7, 0xb6, 0xeb, 0x5c,
	0x0f, 0x46, 0x7d, 0x74, 0xb0, 0xa1, 0x0e, 0xdd, 0x9f, 0x07, 0x4e, 0x77, 0x88, 0x0e, 0xf1, 0x0b,
	0xc0, 0xeb, 0x57, 0x4c, 0x6e, 0xbb, 0xfe, 0xc8, 0xed, 0xf5, 0xd1, 0x11, 0xee, 0x40, 0x7b, 0x4d,
	0x75, 0x9d, 0x9b, 0xfe, 0x18, 0x1d, 0x63, 0x02, 0xa7, 0xa5, 0xd8, 0x2e, 0xed, 0x0d, 0x46, 0xdd,
	0xb1, 0x4b, 0x11, 0x4c, 0x0f, 0xcc, 0x0f, 0xd8, 0x77, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x20,
	0x1b, 0xe4, 0xef, 0x3d, 0x07, 0x00, 0x00,
}
