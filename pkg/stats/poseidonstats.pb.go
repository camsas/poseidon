// Code generated by protoc-gen-go. DO NOT EDIT.
// source: poseidonstats.proto

/*
Package stats is a generated protocol buffer package.

It is generated from these files:
	poseidonstats.proto

It has these top-level messages:
	NodeStats
	NodeStatsResponse
	PodStats
	PodStatsResponse
*/
package stats

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type NodeStatsResponseType int32

const (
	NodeStatsResponseType_NODE_STATS_OK  NodeStatsResponseType = 0
	NodeStatsResponseType_NODE_NOT_FOUND NodeStatsResponseType = 1
)

var NodeStatsResponseType_name = map[int32]string{
	0: "NODE_STATS_OK",
	1: "NODE_NOT_FOUND",
}
var NodeStatsResponseType_value = map[string]int32{
	"NODE_STATS_OK":  0,
	"NODE_NOT_FOUND": 1,
}

func (x NodeStatsResponseType) String() string {
	return proto.EnumName(NodeStatsResponseType_name, int32(x))
}
func (NodeStatsResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type PodStatsResponseType int32

const (
	PodStatsResponseType_POD_STATS_OK  PodStatsResponseType = 0
	PodStatsResponseType_POD_NOT_FOUND PodStatsResponseType = 1
)

var PodStatsResponseType_name = map[int32]string{
	0: "POD_STATS_OK",
	1: "POD_NOT_FOUND",
}
var PodStatsResponseType_value = map[string]int32{
	"POD_STATS_OK":  0,
	"POD_NOT_FOUND": 1,
}

func (x PodStatsResponseType) String() string {
	return proto.EnumName(PodStatsResponseType_name, int32(x))
}
func (PodStatsResponseType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type NodeStats struct {
	Hostname  string `protobuf:"bytes,1,opt,name=hostname" json:"hostname,omitempty"`
	Timestamp uint64 `protobuf:"varint,2,opt,name=timestamp" json:"timestamp,omitempty"`
	// CPU stats (in millicores).
	CpuAllocatable int64 `protobuf:"varint,3,opt,name=cpu_allocatable,json=cpuAllocatable" json:"cpu_allocatable,omitempty"`
	CpuCapacity    int64 `protobuf:"varint,4,opt,name=cpu_capacity,json=cpuCapacity" json:"cpu_capacity,omitempty"`
	// CPU stats (fraction of total).
	CpuReservation float64 `protobuf:"fixed64,5,opt,name=cpu_reservation,json=cpuReservation" json:"cpu_reservation,omitempty"`
	CpuUtilization float64 `protobuf:"fixed64,6,opt,name=cpu_utilization,json=cpuUtilization" json:"cpu_utilization,omitempty"`
	// Memory stats (in KB).
	MemAllocatable int64 `protobuf:"varint,7,opt,name=mem_allocatable,json=memAllocatable" json:"mem_allocatable,omitempty"`
	MemCapacity    int64 `protobuf:"varint,8,opt,name=mem_capacity,json=memCapacity" json:"mem_capacity,omitempty"`
	// Memory stats (fraction of total).
	MemReservation float64 `protobuf:"fixed64,9,opt,name=mem_reservation,json=memReservation" json:"mem_reservation,omitempty"`
	MemUtilization float64 `protobuf:"fixed64,10,opt,name=mem_utilization,json=memUtilization" json:"mem_utilization,omitempty"`
	// per core utilization
	CpuCoreUtilization []int64 `protobuf:"varint,11,rep,packed,name=cpu_core_utilization,json=cpuCoreUtilization" json:"cpu_core_utilization,omitempty"`
}

func (m *NodeStats) Reset()                    { *m = NodeStats{} }
func (m *NodeStats) String() string            { return proto.CompactTextString(m) }
func (*NodeStats) ProtoMessage()               {}
func (*NodeStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NodeStats) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *NodeStats) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *NodeStats) GetCpuAllocatable() int64 {
	if m != nil {
		return m.CpuAllocatable
	}
	return 0
}

func (m *NodeStats) GetCpuCapacity() int64 {
	if m != nil {
		return m.CpuCapacity
	}
	return 0
}

func (m *NodeStats) GetCpuReservation() float64 {
	if m != nil {
		return m.CpuReservation
	}
	return 0
}

func (m *NodeStats) GetCpuUtilization() float64 {
	if m != nil {
		return m.CpuUtilization
	}
	return 0
}

func (m *NodeStats) GetMemAllocatable() int64 {
	if m != nil {
		return m.MemAllocatable
	}
	return 0
}

func (m *NodeStats) GetMemCapacity() int64 {
	if m != nil {
		return m.MemCapacity
	}
	return 0
}

func (m *NodeStats) GetMemReservation() float64 {
	if m != nil {
		return m.MemReservation
	}
	return 0
}

func (m *NodeStats) GetMemUtilization() float64 {
	if m != nil {
		return m.MemUtilization
	}
	return 0
}

func (m *NodeStats) GetCpuCoreUtilization() []int64 {
	if m != nil {
		return m.CpuCoreUtilization
	}
	return nil
}

type NodeStatsResponse struct {
	Type     NodeStatsResponseType `protobuf:"varint,1,opt,name=type,enum=stats.NodeStatsResponseType" json:"type,omitempty"`
	Hostname string                `protobuf:"bytes,2,opt,name=hostname" json:"hostname,omitempty"`
}

func (m *NodeStatsResponse) Reset()                    { *m = NodeStatsResponse{} }
func (m *NodeStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*NodeStatsResponse) ProtoMessage()               {}
func (*NodeStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NodeStatsResponse) GetType() NodeStatsResponseType {
	if m != nil {
		return m.Type
	}
	return NodeStatsResponseType_NODE_STATS_OK
}

func (m *NodeStatsResponse) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

type PodStats struct {
	Name      string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Namespace string `protobuf:"bytes,2,opt,name=namespace" json:"namespace,omitempty"`
	Hostname  string `protobuf:"bytes,3,opt,name=hostname" json:"hostname,omitempty"`
	// CPU stats in millicores.
	CpuLimit   int64 `protobuf:"varint,4,opt,name=cpu_limit,json=cpuLimit" json:"cpu_limit,omitempty"`
	CpuRequest int64 `protobuf:"varint,5,opt,name=cpu_request,json=cpuRequest" json:"cpu_request,omitempty"`
	CpuUsage   int64 `protobuf:"varint,6,opt,name=cpu_usage,json=cpuUsage" json:"cpu_usage,omitempty"`
	// Memory stats in Kb.
	MemLimit            int64   `protobuf:"varint,7,opt,name=mem_limit,json=memLimit" json:"mem_limit,omitempty"`
	MemRequest          int64   `protobuf:"varint,8,opt,name=mem_request,json=memRequest" json:"mem_request,omitempty"`
	MemUsage            int64   `protobuf:"varint,9,opt,name=mem_usage,json=memUsage" json:"mem_usage,omitempty"`
	MemRss              int64   `protobuf:"varint,10,opt,name=mem_rss,json=memRss" json:"mem_rss,omitempty"`
	MemCache            int64   `protobuf:"varint,11,opt,name=mem_cache,json=memCache" json:"mem_cache,omitempty"`
	MemWorkingSet       int64   `protobuf:"varint,12,opt,name=mem_working_set,json=memWorkingSet" json:"mem_working_set,omitempty"`
	MemPageFaults       int64   `protobuf:"varint,13,opt,name=mem_page_faults,json=memPageFaults" json:"mem_page_faults,omitempty"`
	MemPageFaultsRate   float64 `protobuf:"fixed64,14,opt,name=mem_page_faults_rate,json=memPageFaultsRate" json:"mem_page_faults_rate,omitempty"`
	MajorPageFaults     int64   `protobuf:"varint,15,opt,name=major_page_faults,json=majorPageFaults" json:"major_page_faults,omitempty"`
	MajorPageFaultsRate float64 `protobuf:"fixed64,16,opt,name=major_page_faults_rate,json=majorPageFaultsRate" json:"major_page_faults_rate,omitempty"`
	// Network stats in Kb.
	NetRx           int64   `protobuf:"varint,17,opt,name=net_rx,json=netRx" json:"net_rx,omitempty"`
	NetRxErrors     int64   `protobuf:"varint,18,opt,name=net_rx_errors,json=netRxErrors" json:"net_rx_errors,omitempty"`
	NetRxErrorsRate float64 `protobuf:"fixed64,19,opt,name=net_rx_errors_rate,json=netRxErrorsRate" json:"net_rx_errors_rate,omitempty"`
	NetRxRate       float64 `protobuf:"fixed64,20,opt,name=net_rx_rate,json=netRxRate" json:"net_rx_rate,omitempty"`
	NetTx           int64   `protobuf:"varint,21,opt,name=net_tx,json=netTx" json:"net_tx,omitempty"`
	NetTxErrors     int64   `protobuf:"varint,22,opt,name=net_tx_errors,json=netTxErrors" json:"net_tx_errors,omitempty"`
	NetTxErrorsRate float64 `protobuf:"fixed64,23,opt,name=net_tx_errors_rate,json=netTxErrorsRate" json:"net_tx_errors_rate,omitempty"`
	NetTxRate       float64 `protobuf:"fixed64,24,opt,name=net_tx_rate,json=netTxRate" json:"net_tx_rate,omitempty"`
}

func (m *PodStats) Reset()                    { *m = PodStats{} }
func (m *PodStats) String() string            { return proto.CompactTextString(m) }
func (*PodStats) ProtoMessage()               {}
func (*PodStats) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *PodStats) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodStats) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func (m *PodStats) GetHostname() string {
	if m != nil {
		return m.Hostname
	}
	return ""
}

func (m *PodStats) GetCpuLimit() int64 {
	if m != nil {
		return m.CpuLimit
	}
	return 0
}

func (m *PodStats) GetCpuRequest() int64 {
	if m != nil {
		return m.CpuRequest
	}
	return 0
}

func (m *PodStats) GetCpuUsage() int64 {
	if m != nil {
		return m.CpuUsage
	}
	return 0
}

func (m *PodStats) GetMemLimit() int64 {
	if m != nil {
		return m.MemLimit
	}
	return 0
}

func (m *PodStats) GetMemRequest() int64 {
	if m != nil {
		return m.MemRequest
	}
	return 0
}

func (m *PodStats) GetMemUsage() int64 {
	if m != nil {
		return m.MemUsage
	}
	return 0
}

func (m *PodStats) GetMemRss() int64 {
	if m != nil {
		return m.MemRss
	}
	return 0
}

func (m *PodStats) GetMemCache() int64 {
	if m != nil {
		return m.MemCache
	}
	return 0
}

func (m *PodStats) GetMemWorkingSet() int64 {
	if m != nil {
		return m.MemWorkingSet
	}
	return 0
}

func (m *PodStats) GetMemPageFaults() int64 {
	if m != nil {
		return m.MemPageFaults
	}
	return 0
}

func (m *PodStats) GetMemPageFaultsRate() float64 {
	if m != nil {
		return m.MemPageFaultsRate
	}
	return 0
}

func (m *PodStats) GetMajorPageFaults() int64 {
	if m != nil {
		return m.MajorPageFaults
	}
	return 0
}

func (m *PodStats) GetMajorPageFaultsRate() float64 {
	if m != nil {
		return m.MajorPageFaultsRate
	}
	return 0
}

func (m *PodStats) GetNetRx() int64 {
	if m != nil {
		return m.NetRx
	}
	return 0
}

func (m *PodStats) GetNetRxErrors() int64 {
	if m != nil {
		return m.NetRxErrors
	}
	return 0
}

func (m *PodStats) GetNetRxErrorsRate() float64 {
	if m != nil {
		return m.NetRxErrorsRate
	}
	return 0
}

func (m *PodStats) GetNetRxRate() float64 {
	if m != nil {
		return m.NetRxRate
	}
	return 0
}

func (m *PodStats) GetNetTx() int64 {
	if m != nil {
		return m.NetTx
	}
	return 0
}

func (m *PodStats) GetNetTxErrors() int64 {
	if m != nil {
		return m.NetTxErrors
	}
	return 0
}

func (m *PodStats) GetNetTxErrorsRate() float64 {
	if m != nil {
		return m.NetTxErrorsRate
	}
	return 0
}

func (m *PodStats) GetNetTxRate() float64 {
	if m != nil {
		return m.NetTxRate
	}
	return 0
}

type PodStatsResponse struct {
	Type      PodStatsResponseType `protobuf:"varint,1,opt,name=type,enum=stats.PodStatsResponseType" json:"type,omitempty"`
	Name      string               `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Namespace string               `protobuf:"bytes,3,opt,name=namespace" json:"namespace,omitempty"`
}

func (m *PodStatsResponse) Reset()                    { *m = PodStatsResponse{} }
func (m *PodStatsResponse) String() string            { return proto.CompactTextString(m) }
func (*PodStatsResponse) ProtoMessage()               {}
func (*PodStatsResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *PodStatsResponse) GetType() PodStatsResponseType {
	if m != nil {
		return m.Type
	}
	return PodStatsResponseType_POD_STATS_OK
}

func (m *PodStatsResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PodStatsResponse) GetNamespace() string {
	if m != nil {
		return m.Namespace
	}
	return ""
}

func init() {
	proto.RegisterType((*NodeStats)(nil), "stats.NodeStats")
	proto.RegisterType((*NodeStatsResponse)(nil), "stats.NodeStatsResponse")
	proto.RegisterType((*PodStats)(nil), "stats.PodStats")
	proto.RegisterType((*PodStatsResponse)(nil), "stats.PodStatsResponse")
	proto.RegisterEnum("stats.NodeStatsResponseType", NodeStatsResponseType_name, NodeStatsResponseType_value)
	proto.RegisterEnum("stats.PodStatsResponseType", PodStatsResponseType_name, PodStatsResponseType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for PoseidonStats service

type PoseidonStatsClient interface {
	ReceiveNodeStats(ctx context.Context, opts ...grpc.CallOption) (PoseidonStats_ReceiveNodeStatsClient, error)
	ReceivePodStats(ctx context.Context, opts ...grpc.CallOption) (PoseidonStats_ReceivePodStatsClient, error)
}

type poseidonStatsClient struct {
	cc *grpc.ClientConn
}

func NewPoseidonStatsClient(cc *grpc.ClientConn) PoseidonStatsClient {
	return &poseidonStatsClient{cc}
}

func (c *poseidonStatsClient) ReceiveNodeStats(ctx context.Context, opts ...grpc.CallOption) (PoseidonStats_ReceiveNodeStatsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PoseidonStats_serviceDesc.Streams[0], c.cc, "/stats.PoseidonStats/ReceiveNodeStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &poseidonStatsReceiveNodeStatsClient{stream}
	return x, nil
}

type PoseidonStats_ReceiveNodeStatsClient interface {
	Send(*NodeStats) error
	Recv() (*NodeStatsResponse, error)
	grpc.ClientStream
}

type poseidonStatsReceiveNodeStatsClient struct {
	grpc.ClientStream
}

func (x *poseidonStatsReceiveNodeStatsClient) Send(m *NodeStats) error {
	return x.ClientStream.SendMsg(m)
}

func (x *poseidonStatsReceiveNodeStatsClient) Recv() (*NodeStatsResponse, error) {
	m := new(NodeStatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *poseidonStatsClient) ReceivePodStats(ctx context.Context, opts ...grpc.CallOption) (PoseidonStats_ReceivePodStatsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_PoseidonStats_serviceDesc.Streams[1], c.cc, "/stats.PoseidonStats/ReceivePodStats", opts...)
	if err != nil {
		return nil, err
	}
	x := &poseidonStatsReceivePodStatsClient{stream}
	return x, nil
}

type PoseidonStats_ReceivePodStatsClient interface {
	Send(*PodStats) error
	Recv() (*PodStatsResponse, error)
	grpc.ClientStream
}

type poseidonStatsReceivePodStatsClient struct {
	grpc.ClientStream
}

func (x *poseidonStatsReceivePodStatsClient) Send(m *PodStats) error {
	return x.ClientStream.SendMsg(m)
}

func (x *poseidonStatsReceivePodStatsClient) Recv() (*PodStatsResponse, error) {
	m := new(PodStatsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for PoseidonStats service

type PoseidonStatsServer interface {
	ReceiveNodeStats(PoseidonStats_ReceiveNodeStatsServer) error
	ReceivePodStats(PoseidonStats_ReceivePodStatsServer) error
}

func RegisterPoseidonStatsServer(s *grpc.Server, srv PoseidonStatsServer) {
	s.RegisterService(&_PoseidonStats_serviceDesc, srv)
}

func _PoseidonStats_ReceiveNodeStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoseidonStatsServer).ReceiveNodeStats(&poseidonStatsReceiveNodeStatsServer{stream})
}

type PoseidonStats_ReceiveNodeStatsServer interface {
	Send(*NodeStatsResponse) error
	Recv() (*NodeStats, error)
	grpc.ServerStream
}

type poseidonStatsReceiveNodeStatsServer struct {
	grpc.ServerStream
}

func (x *poseidonStatsReceiveNodeStatsServer) Send(m *NodeStatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *poseidonStatsReceiveNodeStatsServer) Recv() (*NodeStats, error) {
	m := new(NodeStats)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _PoseidonStats_ReceivePodStats_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PoseidonStatsServer).ReceivePodStats(&poseidonStatsReceivePodStatsServer{stream})
}

type PoseidonStats_ReceivePodStatsServer interface {
	Send(*PodStatsResponse) error
	Recv() (*PodStats, error)
	grpc.ServerStream
}

type poseidonStatsReceivePodStatsServer struct {
	grpc.ServerStream
}

func (x *poseidonStatsReceivePodStatsServer) Send(m *PodStatsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *poseidonStatsReceivePodStatsServer) Recv() (*PodStats, error) {
	m := new(PodStats)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _PoseidonStats_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stats.PoseidonStats",
	HandlerType: (*PoseidonStatsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveNodeStats",
			Handler:       _PoseidonStats_ReceiveNodeStats_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "ReceivePodStats",
			Handler:       _PoseidonStats_ReceivePodStats_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "poseidonstats.proto",
}

func init() { proto.RegisterFile("poseidonstats.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 767 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x95, 0xdf, 0x6e, 0xdb, 0x36,
	0x14, 0xc6, 0xab, 0xc8, 0x71, 0xed, 0xe3, 0xf8, 0x1f, 0xe3, 0x34, 0x42, 0x5a, 0x6c, 0x9e, 0x2f,
	0x36, 0x23, 0x03, 0xda, 0xa0, 0xbd, 0x1c, 0x30, 0x20, 0xa8, 0x9b, 0x9b, 0x0d, 0xb6, 0x21, 0x2b,
	0xd8, 0xa5, 0xc0, 0x28, 0x67, 0x8e, 0x36, 0xd3, 0xd2, 0x44, 0x2a, 0x4b, 0xf6, 0x24, 0x7b, 0x8f,
	0x01, 0x7b, 0xbe, 0x82, 0x87, 0x16, 0x2d, 0x29, 0xc9, 0x95, 0xc1, 0xa3, 0xdf, 0xf9, 0xf8, 0x99,
	0x1f, 0x8f, 0x04, 0xc7, 0x69, 0x22, 0x31, 0xbe, 0x4d, 0xb6, 0x52, 0x71, 0x25, 0xdf, 0xa7, 0x59,
	0xa2, 0x12, 0x76, 0x48, 0x8b, 0xc9, 0x7f, 0x2e, 0xb4, 0xe7, 0xc9, 0x2d, 0xae, 0xf4, 0x8a, 0x9d,
	0x41, 0xeb, 0x2e, 0x91, 0x6a, 0xcb, 0x05, 0x7a, 0xce, 0xd8, 0x99, 0xb6, 0x7d, 0xbb, 0x66, 0xef,
	0xa0, 0xad, 0x62, 0x81, 0x52, 0x71, 0x91, 0x7a, 0x07, 0x63, 0x67, 0xda, 0xf0, 0xf7, 0x05, 0xf6,
	0x03, 0xf4, 0xa3, 0x34, 0x0f, 0xf9, 0x66, 0x93, 0x44, 0x5c, 0xf1, 0x9b, 0x0d, 0x7a, 0xee, 0xd8,
	0x99, 0xba, 0x7e, 0x2f, 0x4a, 0xf3, 0xcb, 0x7d, 0x95, 0x7d, 0x07, 0x47, 0x1a, 0x8c, 0x78, 0xca,
	0xa3, 0x58, 0x3d, 0x7a, 0x0d, 0xa2, 0x3a, 0x51, 0x9a, 0x7f, 0xde, 0x95, 0x0a, 0xad, 0x0c, 0x25,
	0x66, 0xf7, 0x5c, 0xc5, 0xc9, 0xd6, 0x3b, 0x1c, 0x3b, 0x53, 0x87, 0xb4, 0xfc, 0x7d, 0xb5, 0x00,
	0x73, 0x15, 0x6f, 0xe2, 0x7f, 0x0c, 0xd8, 0xb4, 0xe0, 0xf5, 0xbe, 0xaa, 0x41, 0x81, 0xa2, 0xe2,
	0xee, 0xb5, 0x71, 0x27, 0x50, 0xd4, 0xdc, 0x69, 0xd0, 0xba, 0x6b, 0x19, 0x77, 0x02, 0x45, 0xd9,
	0x9d, 0x46, 0xca, 0xee, 0xda, 0x66, 0x53, 0x81, 0xa2, 0xe6, 0x4e, 0x83, 0x65, 0x77, 0x60, 0xc1,
	0xb2, 0xbb, 0x0b, 0x18, 0xd1, 0x91, 0x24, 0x19, 0x56, 0xe8, 0xce, 0xd8, 0x9d, 0xba, 0x3e, 0xd3,
	0x47, 0x93, 0x64, 0x58, 0xea, 0x98, 0x70, 0x18, 0xda, 0xd0, 0x7c, 0x94, 0x69, 0xb2, 0x95, 0xc8,
	0x2e, 0xa0, 0xa1, 0x1e, 0x53, 0x13, 0x5c, 0xef, 0xe3, 0xbb, 0xf7, 0x26, 0xed, 0x27, 0x5c, 0xf0,
	0x98, 0xa2, 0x4f, 0x64, 0x25, 0xee, 0x83, 0x6a, 0xdc, 0x93, 0xff, 0x9b, 0xd0, 0x5a, 0x26, 0xb7,
	0xe6, 0x5e, 0x30, 0x68, 0x94, 0xee, 0x44, 0xa3, 0xb8, 0x0f, 0xfa, 0x57, 0xa6, 0x3c, 0x2a, 0xba,
	0xf7, 0x85, 0x8a, 0xb4, 0x5b, 0xbb, 0x49, 0x6f, 0xa1, 0xad, 0xff, 0xef, 0x26, 0x16, 0xb1, 0xda,
	0xe5, 0xdf, 0x8a, 0xd2, 0xfc, 0x57, 0xbd, 0x66, 0xdf, 0x42, 0xc7, 0x84, 0xff, 0x57, 0x8e, 0x52,
	0x51, 0xf0, 0xae, 0x0f, 0x14, 0x3c, 0x55, 0x8a, 0xee, 0x5c, 0xf2, 0x35, 0x52, 0xdc, 0xa6, 0xfb,
	0x5a, 0xaf, 0xf5, 0x43, 0x7d, 0xe6, 0x46, 0xda, 0x44, 0xdc, 0x12, 0x28, 0xac, 0xb4, 0x49, 0xce,
	0x48, 0x9b, 0x6c, 0x81, 0x52, 0xb3, 0xd2, 0x94, 0x18, 0x49, 0xb7, 0x6d, 0xb7, 0x91, 0x3e, 0x85,
	0xd7, 0xd4, 0x2d, 0x25, 0xc5, 0xe8, 0xfa, 0x4d, 0xdd, 0x29, 0x65, 0xd1, 0x15, 0xf1, 0xe8, 0x0e,
	0xbd, 0x8e, 0xed, 0xfa, 0xac, 0xd7, 0xec, 0x7b, 0x73, 0x09, 0xfe, 0x4e, 0xb2, 0x3f, 0xe3, 0xed,
	0x3a, 0x94, 0xa8, 0xbc, 0x23, 0x42, 0xba, 0x02, 0xc5, 0x6f, 0xa6, 0xba, 0x42, 0x55, 0x70, 0x29,
	0x5f, 0x63, 0xf8, 0x3b, 0xcf, 0x37, 0x4a, 0x7a, 0x5d, 0xcb, 0x2d, 0xf9, 0x1a, 0xaf, 0xa8, 0xc8,
	0x3e, 0xc0, 0xa8, 0xc6, 0x85, 0x19, 0x57, 0xe8, 0xf5, 0xe8, 0x66, 0x0d, 0x2b, 0xb0, 0xcf, 0x15,
	0xb2, 0x73, 0x18, 0x0a, 0xfe, 0x47, 0x92, 0x55, 0xa4, 0xfb, 0x24, 0xdd, 0xa7, 0x07, 0x25, 0xf1,
	0x4f, 0xf0, 0xe6, 0x09, 0x6b, 0xe4, 0x07, 0x24, 0x7f, 0x5c, 0x6b, 0xa0, 0x0d, 0x4e, 0xa0, 0xb9,
	0x45, 0x15, 0x66, 0x0f, 0xde, 0x90, 0x54, 0x0f, 0xb7, 0xa8, 0xfc, 0x07, 0x36, 0x81, 0xae, 0x29,
	0x87, 0x98, 0x65, 0x49, 0x26, 0x3d, 0x66, 0x46, 0x89, 0x9e, 0x7e, 0xa1, 0x12, 0xfb, 0x11, 0x58,
	0x85, 0x31, 0x7b, 0x1d, 0xd3, 0x5e, 0xfd, 0x12, 0x48, 0xfb, 0x7c, 0x03, 0x9d, 0x1d, 0x4c, 0xd4,
	0x88, 0xa8, 0x36, 0x51, 0x65, 0x1f, 0xea, 0xc1, 0x3b, 0xb1, 0x3e, 0x02, 0xeb, 0x43, 0x59, 0x1f,
	0x6f, 0xac, 0x8f, 0xa0, 0xe6, 0x43, 0x55, 0x7d, 0x9c, 0x5a, 0x1f, 0xc1, 0x33, 0x3e, 0xd4, 0xce,
	0x87, 0x67, 0x7d, 0x04, 0xe4, 0x63, 0x92, 0xc3, 0xa0, 0x98, 0x1b, 0x3b, 0x9a, 0x1f, 0x2a, 0xa3,
	0xf9, 0x76, 0x37, 0x9a, 0x75, 0xac, 0x34, 0x99, 0xc5, 0xc0, 0x1d, 0xbc, 0x34, 0x70, 0x6e, 0x6d,
	0xe0, 0xce, 0x7f, 0x86, 0x93, 0x67, 0x47, 0x9d, 0x0d, 0xa1, 0x3b, 0x5f, 0xcc, 0xbe, 0x84, 0xab,
	0xe0, 0x32, 0x58, 0x85, 0x8b, 0x5f, 0x06, 0xaf, 0x18, 0x83, 0x1e, 0x95, 0xe6, 0x8b, 0x20, 0xbc,
	0x5a, 0x5c, 0xcf, 0x67, 0x03, 0xe7, 0xfc, 0x27, 0x18, 0x3d, 0xe7, 0x87, 0x0d, 0xe0, 0x68, 0xb9,
	0x98, 0x95, 0xbb, 0x87, 0xd0, 0xd5, 0x95, 0x52, 0xf3, 0xc7, 0x7f, 0x1d, 0xe8, 0x2e, 0x77, 0x1f,
	0x19, 0xf3, 0xc6, 0x98, 0xc1, 0xc0, 0xc7, 0x08, 0xe3, 0x7b, 0xdc, 0x7f, 0x5d, 0x06, 0xf5, 0x57,
	0xd2, 0x99, 0xf7, 0xd2, 0x4b, 0x6a, 0xf2, 0x6a, 0xea, 0x5c, 0x38, 0xec, 0x12, 0xfa, 0x3b, 0x15,
	0xfb, 0x2a, 0xea, 0xd7, 0x0e, 0xef, 0xec, 0xf4, 0x85, 0xd3, 0x34, 0x12, 0x37, 0x4d, 0xfa, 0xdc,
	0x7d, 0xfa, 0x1a, 0x00, 0x00, 0xff, 0xff, 0xf1, 0xc8, 0xcb, 0x0e, 0x05, 0x07, 0x00, 0x00,
}
